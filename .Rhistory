# Corresponding table :
(xt <- xtabs(Freq ~ Survived + Class + Sex, d.Titanic, subset = Age=="Adult"))
# Alternatively, a mosaic plot :
mosaicplot(xt[,,"Male"], main = "mosaicplot(Freq ~ Class + Survived, *)", color=TRUE)
par(op)
library(Ecdat)
head(Housing)
head(Star)
install.packages("tidyverse")
a
library(tidyverse)
data(iris)
head(iris)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
Y
Y
data(package='Ecdat')
View(Fishing)
library(Ecdat)
View(Fishing)
View(Clothing)
View(Computers)
View(Fatality)
View(Males)
View(OFP)
View(Workinghours)
View(Wages)
head(Schooling)
source('~/GitHub/gh-advancing-into-analytics/drafts-in-progress/chapter-08-r-for-data-analysis/r-wrangling-dataviz-star.R', echo=TRUE)
head(ManufCost)
head(Fair)
head(Bwages)
head(Males)
head(Consumption)
head(Heating)
head(LaborSupply)
head(Produc)
data()
airquality
ToothGrowth
mtcars
sunspots
women
chickwts
cars
PlantGrowth
ability.cov
airmiles
attenu
# read the dataset into a data frame
abalone <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data", header=FALSE)
# add column names
names(abalone) <- c("sex", "length", "diameter", "height", "weight.whole",
"weight.shucked", "weight.viscera", "weight.shell", "rings")
head(abalone)
library(rattle.data)
install.packages('rattle.data')
wine
library(rattle.data)
wine
head(abalone)
table(abalone$ringx)
table(abalone$rings)
hist(abalone$rings)
library(dplyr)
1 * 2
1 * 2 # This comment is possible
# This comment is preferred
2 * 1
# For reading in csv files
library(readr)
# For reading in Excel files
library(readxl)
# For summary statistics
library(psych)
# For reading in csv files
library(readr)
# For reading in Excel files
library(readxl)
# For summary statistics
library(psych)
# For importing and exploring data
library(tidyverse)
# For reading in Excel files
library(readxl)
# For summary statistics
library(psych)
# For importing and exploring data
library(tidyverse)
# For reading in Excel files
library(readxl)
# For summary statistics
library(psych)
# For importing and exploring data
library(tidyverse)
# For reading in Excel files
library(readxl)
# For summary statistics
library(psych)
?c
a <- 1
is.vector(a)
my_char <- 'Hello, world'
toupper(my_char)
is.vector(my_number)
my_number <- 8.2
sqrt(my_number)
is.vector(my_number)
my_numbers <- c(5, 8, 2, 7)
str(my_numbers)
typeof(my_numbers)
is.vector(my_numbers)
is.vector(my_numbers)
typeof(my_numbers)
length(my_number)
is.vector(my_numbers)
typeof(my_numbers)
length(my_numbers)
sqrt(my_numbers)
roster_names <- c('Jack', 'Jill', 'Billy', 'Susie', 'Johnny')
toupper(roster_names)
my_vec <- c('A', 2, 'C')
my_vec
typeof(my_vec)
my_vec <- c('A', 2, 'C')
my_vec
typeof(my_vec)
roster_names <- c('Jack', 'Jill', 'Billy', 'Susie', 'Johnny')
# Get third element of roster_names vector
roster_names[3]
# Get get first through third elements
roster_names[1:3]
length(roster_names)
# Get second through last elements
roster_names[2:length(roster_names)]
# Get second and fifth elements
roster_names[c(2, 4)]
# Get second and fifth elements
roster_names[c(2, 4)]
# Get second and fifth elements
roster_names[c(2, 4)]
# Get second and fifth elements
roster_names[c(2, 5)]
# Get second and fifth elements
roster_names[c(2, 5)]
# Get second and fifth elements
roster_names[c(2, 5)]
# Get second and fifth elements
roster_names[c(2, 5)]
# Get second and fifth elements
roster_names[c(2, 5)]
# View listing of available datasets
data()
airquality
ChickWeight
sunspots
Titanic
ToothGrowth
str(iris)
glimpse(iris)
dplyr;:glimpse(iris)
dplyr::glimpse(iris)
is.data.frame(iris)
install.packages('Lahman')
?Lahman
library(Lahman)
?Lahman
data(package = 'Lahman')
mtcars
data()
library(tidyverse)
getwd
getwd()
library(tidyverse)
mpg <- read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv')
mpg_split <- split(mpg, mpg$origin)
# Check the home directory for these files
ws_counter <- 1
for(ws in mpg_split){
write_csv(ws, file = paste0(names(mpg_split)[ws_counter],'.xlsx'))
ws_counter <- ws_counter + 1}
library(tidyverse)
mpg <- read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv')
mpg_split <- split(mpg, mpg$origin)
# Check the home directory for these files
ws_counter <- 1
for(ws in mpg_split){
write_csv(ws, file = paste0(names(mpg_split)[ws_counter],'.csv'))
ws_counter <- ws_counter + 1}
library(tidyverse)
mpg <- read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv')
mpg_split <- split(mpg, mpg$origin)
# Check the home directory for these files
ws_counter <- 1
for(ws in mpg_split){
write_csv(ws, paste0(names(mpg_split)[ws_counter],'.csv'))
ws_counter <- ws_counter + 1}
mpg %>%
nest(-origin) %>%
pwalk(~write_csv(x = .y, path = paste0(.x, ".csv") ) )
library(gapminder)
install.packages('gapminder')
library(gapminder)
gapminder %>%
nest(-country) %>%
pwalk(~write_csv(x = .y, path = paste0(.x, ".csv") ) )
mpg %>%
nest(-origin) %>%
pwalk(~write_csv(x = .y, path = paste0(.x, ".csv") ) )
?pwalk
?nest
?pwalk
options(width=80)
library(psych)
library(Ecdat)
describe(Housing)
library(psych)
library(Ecdat)
describe(Housing)
library(Ecdat)
names(Housing)
names(Housing)
names(Housing)
# Facet histogram
ggplot(data = Housing, aes(x = price)) +
geom_histogram()+
facet_wrap(~ airco)
library(tidyverse)
# Facet histogram
ggplot(data = Housing, aes(x = price)) +
geom_histogram()+
facet_wrap(~ airco)
# Facet histogram
ggplot(data = Housing, aes(x = price, fill = airco)) +
geom_histogram()
# Facet histogram
ggplot(data = Housing, aes(x = price, fill = airco)) +
geom_histogram() +
ggtitle("Distribution of homes with and without air conditioning")
# Facet histogram
ggplot(data = Housing, aes(x = price, fill = airco)) +
geom_histogram() +
ggtitle("Distribution of homes
with and without air conditioning")
# Facet histogram
ggplot(data = Housing, aes(x = price, fill = airco)) +
geom_histogram() +
ggtitle("Distribution of homes
with and without air conditioning")
library(psyych)
library(pysch)
library(pysch)
library(psych)
describeBy(Housing, group = 'airco')
Housing %>%
select(price, airco) %>%
describeBy(group = airco)
Housing %>%
select(price, airco) %>%
describeBy(group = 'airco')
homes_ac <- filter(Housing, airco = 'yes')
homes_no_ac <- filter(Housing, airco == 'no')
t.test(homes_ac$price, homes_no_ac$price)
homes_ac <- filter(Housing, airco == 'yes')
homes_no_ac <- filter(Housing, airco == 'no')
t.test(homes_ac$price, homes_no_ac$price)
homes_ac_price <- Housing %>%
filter(airco == 'yes') %>%
select(price)
homes_no_ac_price <- Housing %>%
filter(airco == 'no') %>%
select(price)
t.test(homes_ac_price, homes_no_ac_price)
library(Ecdat)
library(tidyverse)
library(psych)
# Price statistics by airco
Housing %>%
select(price, airco) %>%
describeBy(group = 'airco')
# Facet histogram
ggplot(data = Housing, aes(x = price, fill = airco)) +
geom_histogram() +
ggtitle("Distribution of homes
with and without air conditioning")
# T-test
homes_ac_price <- Housing %>%
filter(airco == 'yes') %>%
select(price)
homes_no_ac_price <- Housing %>%
filter(airco == 'no') %>%
select(price)
t.test(homes_ac_price, homes_no_ac_price)
# Price statistics by airco
Housing %>%
select(price, airco) %>%
describeBy(group = 'airco')
# Facet histogram
ggplot(data = Housing, aes(x = price, fill = airco)) +
geom_histogram() +
ggtitle("Distribution of homes
with and without air conditioning")
# T-test
homes_ac_price <- Housing %>%
filter(airco == 'yes') %>%
select(price)
homes_no_ac_price <- Housing %>%
filter(airco == 'no') %>%
select(price)
t.test(homes_ac_price, homes_no_ac_price)
library(tidyverse)
library(readxl)
library(psych)
library(sweep)
install.packages('sweep')
data(package = 'sweep')
View(bike_sales)
data(bike_sales)
bike_sales
data(bike_sales)
library(sweep)
data(bike_sales)
bike_sales
View(bike_sales)
library(reticulate)
library(reticulate)
#importing required Python libraries/modules
sns <- import('seaborn')
plt <- import('matplotlib.pyplot')
pd <- import('pandas')
library(Ecdat)
housing_df <- r_to_py(Housing)
str(housing_df)
# You can now
str(sns)
# You can now plot the pairplot
sns$pairplot(data = housing_df)
plt$show()
sns$pairplot(data = housing_df)
plt$show()
# Heatmaps are nice too
sns$pairplot(data = housing_df)
sns$pairplot(data = housing_df)
plt$show()
sns$heatmap(data = housing_df)
plt$show()
tibble('Winner!' = rdunif(1, 1, 10)) %>%
grid.table(rows = '') %>%
ttheme_default(base_size = 30)
library(gridExtra)
library(tidyverse)
tibble('Winner!' = rdunif(1, 1, 10)) %>%
grid.table(rows = '') %>%
ttheme_default(base_size = 30)
library(mice)
?mice
imp <- mice(dataset, method = "mean", m = 1, maxit = 1)
complete_data <- complete(imp)
output  <- dataset %>%
mutate(is_email = str_detect(email, "\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>"))
# Read in data
dataset <- read_csv('data/contestants.csv')
dataset
# Read in data
dataset <- read_csv('data/contestants.csv')
dataset
library(tidyverse)
library(readxl)
# Read in data
dataset <- read_csv('data/contestants.csv')
dataset
library(tidyverse)
library(readxl)
# Read in data
dataset <- read_csv('data/contestants.csv')
setwd("~/GitHub/satrday-r-power-bi")
library(tidyverse)
library(readxl)
# Read in data
dataset <- read_csv('data/contestants.csv')
dataset
output  <- dataset %>%
mutate(is_email = str_detect(email, "\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>"))
output
View(output)
output  <- dataset %>%
mutate(is_email = str_detect(email, "\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>"))
output
isValidEmail <- function(x) {
grepl("\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>", as.character(x), ignore.case=TRUE)
}
isValidEmail("felix@nicebread")
isValidEmail("felix@nicebread@de")
isValidEmail("felixnicebread.de")
isValidEmail("felix@nicebread.de")
isValidEmail("felix.123.honeyBunny@nicebread.lmu.de")
isValidEmail("felix@nicebread.de  ")
isValidEmail("    felix@nicebread.de")
isValidEmail("felix+batman@nicebread.de")
isValidEmail("felix@nicebread.office")
output  <- dataset %>%
mutate(is_email = str_detect(email, "<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}>"))
View(output)
output  <- dataset %>%
mutate(is_email = str_detect(email, ":[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])"))
output  <- dataset %>%
mutate(is_email = str_detect(email, "^[[:alnum:]._-]+@[[:alnum:].-]+$"))
View(output)
output  <- dataset %>%
mutate(is_email = str_detect(email, "[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}"))
output  <- dataset %>%
mutate(is_email = str_detect(email, "[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}"))
View(output)
dataset <- read_csv('data/contestants.csv')
dataset
output  <- dataset %>%
mutate(is_email = str_detect(email, "[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}"))
View(output)
library(tidyverse)
library(readxl)
# Read in data
dataset <- read_csv('data/contestants.csv')
dataset
dset %>% select(-email) %>% ggpairs()
output  <- dataset %>%
mutate(is_email = str_detect(email, "[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}"))
View(output)
output
output  <- dataset %>%
mutate(is_email = str_match(email, "^[[:alnum:].-_]+@[[:alnum:].-]+$"))
output
output  <- dataset %>%
mutate(is_email = str_match(email, "^[[:alnum:].-_]+@[[:alnum:].-]+$"))
output
output  <- dataset %>%
mutate(is_email = str_detect(email, "^[[:alnum:].-_]+@[[:alnum:].-]+$"))
output
library(tidyverse)
library(readxl)
# Read in data
dataset <- read_csv('data/contestants.csv')
dataset
dset <- read_excel('data/contestants.xlsx')
dset
dset %>% select(-email) %>% ggpairs()
isValidEmail <- function(x) {
grepl("\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>", as.character(x), ignore.case=TRUE)
}
# 1. Invalid emails
output  <- dataset %>%
mutate(is_email = str_detect(email, "^[[:alnum:].-_]+@[[:alnum:].-]+$"))
output
output  <- dataset %>%
mutate(is_email = str_detect(email, "\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>",))
output
library(tidyverse)
library(readxl)
# Read in data
dataset <- read_csv('data/contestants.csv')
dataset
dset <- read_excel('data/contestants.xlsx')
dset
dset %>% select(-email) %>% ggpairs()
isValidEmail <- function(x) {
grepl("\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>", as.character(x), ignore.case=TRUE)
}
# 1. Invalid emails
output  <- dataset %>%
mutate(is_email = str_detect(email, "\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>",))
output
dataset$is_valid_email <- isValidEmail(dataset$email)
View(dataset)
# Read in data
dataset <- read_csv('data/contestants.csv')
dataset
output
dataset <- read_csv('data/contestants.csv')
dataset
output <- dataset
output %>% mutate(is_email = str_detect("\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>"))
output
output <- dataset %>% mutate(is_email = str_detect("\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>"))
output
output <- dataset %>% mutate(is_email = str_detect("\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>"))
output
output <- dataset %>% mutate(is_email = str_detect("^[[:alnum:].-_]+@[[:alnum:].-]+$"))
dataset <- read_csv('data/contestants.csv')
dataset
output <- dataset %>% mutate(is_email = str_detect("^[[:alnum:].-_]+@[[:alnum:].-]+$"))
output
output <- dataset %>% mutate(is_email = str_detect("^[[:alnum:].-_]+@[[:alnum:].-]+$"))
dataset <- read_csv('data/contestants.csv')
dataset
output <- dataset %>% mutate(is_email = str_detect(email, "^[[:alnum:].-_]+@[[:alnum:].-]+$"))
output
output <- dataset %>% mutate(is_email = str_detect(email, "\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>"))
output
output <- dataset %>% mutate(is_email = str_detect(email, "\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>"))
output
isValidEmail <- function(x) {
grepl("\\<[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}\\>", as.character(x), ignore.case=TRUE)
}
dataset$is_valid_email <- isValidEmail(dataset$email)
View(dataset)
